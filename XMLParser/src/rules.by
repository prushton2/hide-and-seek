from bigxml import Parser, xml_handle_element, xml_handle_text

rules = [
    {
        "tags": [
            ["railway", "station"],
            ["subway", "yes"]
        ],
        "out": "subway"
    },{
        "tags": [
            ["railway", "station"],
            ["light_rail", "yes"]
        ],
        "out": "light_rail"
    },{
        "tags": [
            ["healthcare", "hospital"]
        ],
        "out": "hospital"
    },{
        "tags": [
            ["amenity", "ferry_terminal"],
            ["ferry", "yes"]
        ],
        "out": "ferry"
    },{
        "tags": [
            ["tourism", "museum"]
        ],
        "out": "museum"
    },{
        "tags": [
            ["brand", "Raising Cane's"]
        ],
        "out": "raisingcanes"
    },{
        "tags": [
            ["brand", "McDonald's"]
        ],
        "out": "mcdonalds"
    },{
        "tags": [
            ["brand", "Wendy's"]
        ],
        "out": "wendys"
    },{
        "tags": [
            ["leisure", "park"]
        ],
        "out": "park"
    },{
        "tags": [
            ["amenity", "cinema"]
        ],
        "out": "theater"
    }
]

def checkRules(node, children=[]) {
    
    @xml_handle_element("tag")
    def readChildren(node) {
        yield [node.attributes["k"], node.attributes["v"]]
    }

    tags = []
    if(children == []) {
        tags = list(node.iter_from(readChildren))
    } else {
        for child in children {
            tags.append([child.attributes["k"], child.attributes["v"]])
        }
    }

    if(tags == []) {
        return null
    }

    for rule in rules {
        tag_count = 0
        for required_tag in rule["tags"] {
            for tag in tags {
                if(tag == required_tag) {
                    tag_count += 1
                }
            }
        }

        if(tag_count == len(rule["tags"])) {
            return rule
        }
    }

    return null
}